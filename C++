ðŸ‘‰Example :
  Input:
  N = 5
  Output:
  21
  Explanation:
  F(1) = 1
  F(2) = 1 + 2 = 3  //divisor of 2 is 1 and 2 so we have to get their sum i.e 3
  F(3) = 1 + 3 = 4  //divisor of 3 is 1 and 3 so we have to get their sum i.e 4
  F(4) = 1 + 2 + 4 = 7  //divisor of 4 is 1 ,2 and 4 so we have to get their sum i.e 7
  F(5) = 1 + 5 = 6      //similarly.
  
  ans = F(1) + F(2) + F(3) + F(4) + F(5) // inlast we return the sum of divisior of each dividend.
      = 1 + 3 + 4 + 7 + 6
      = 21 //output .

ðŸ‘‰Constraint 1<=N<=10^6

ðŸ‘‰Optimal T.C required O(N).
        S.C required O(1).
ðŸ‘‰Brute   T.C O(N^2).
-----------------------------------------------------------------------------------------------------
class Solution
{
public:
    long long sumOfDivisors(int N)
    {
                                |let N=4 
       long long sum=0;         -------------------------------------------------------------
       for(int i=1;i<=N;i++){   |i=1           |i=2           |i=3           |i=4 
           sum+=i*(N/i);        |sum+=1*(4/1)  |sum+=2*(4/2)  |sum+=3*(4/3)  |sum+=4*(4/4)
       }                        |sum=4         |sum=8         |sum=11        |sum=15
       return sum;              ðŸ‘‰Actually we are calculating the the no. of time divisior is repeated 
    }                           ðŸ‘‰f(1)=1
};                              ðŸ‘‰f(2)=1+2=3
                                ðŸ‘‰f(3)=1+3=4
                                ðŸ‘‰f(4)=1+2+4=7
           
            ðŸ‘‰just notice that 1 come 4 times , 2 comes 2 time ,3 comes 1 time ,4 comes 1 time.
            ðŸ‘‰(N/i) tells the number of time the (i) number is repeating.
            ðŸ‘‰Example : 1 repeats (4/1) time i.e 4.
                        2 repeats (4/2) time i.e 2.
                        3 repeats (4/3) time i.e 1.
                        4 repeats (4/4) time i.e 1.
            ðŸ‘‰In last we take the sum of repeating divisor .ðŸ˜€
